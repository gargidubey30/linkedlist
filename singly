#include <iostream>
#include <vector>  

using namespace std;

class Node {
public: 
    int data;      
    Node* next;   

    // Constructor 1
    Node(int data1, Node* next1) {
        data = data1;
        next = next1;
    }

    // Constructor 2 for last node 
    Node(int data1) {
        data = data1;
        next = nullptr;
    }
};



//convert array to linked list
Node* convertArr2LL( vector<int> arr)
{  
    int n=arr.size();
Node* head= new Node(arr[0]);
Node* mover=head;

for(int i=1; i<n ;i++){
    Node* temp=new Node(arr[i]);
    mover->next=temp;
    mover=temp;
}
return head;
}

int lengthOFLL(Node *head)
{
    int cnt = 0;
    Node *temp = head;
    while (temp != NULL)
    {
      
        temp = temp->next;
        cnt++;
    }
    return cnt;
}

void print (Node *head){
     //Node *temp = head;
    while (head != NULL)
    {
        cout << head->data << " ";
       head = head->next;
       
    }

    cout<<endl;
   

}

bool checkIfPresent (Node* head, int val){

    Node *temp = head;
    while (temp != NULL)
    {
       if(temp->data==val) return true;
      temp = temp->next;
    }
    return false;


}


// delete the head of ll
Node* removesHead(Node* head){

    if(head==NULL) return head;
    Node* temp=head;
    head=head->next;
    delete temp;
    return head;

}

// delete the tail of ll
Node* removesTail(Node* head){


    // if list is empty
    if (head == NULL) return head;

    // If there's only one node in the list
    if (head->next == NULL) {
        delete head;
        return NULL;
    }

    Node* prev=NULL;
    Node* curr=head;
    while(curr->next!=NULL){
        prev=curr;
        curr=curr->next;    

    }
     prev->next=NULL;
    delete curr;
    return head;

}


// delete the kth node from the linked list
Node* deleteK(Node* head,int k){

    // if list is empty
    if (head == NULL) return head;

    //if k is first 
    if(k==1){
         Node* temp=head;
    head=head->next;
    delete temp;
    return head;

    }

    //if k is any number another than 1

    Node* prev=NULL;
    Node* curr=head;
    int cnt=1;
    while(curr!=NULL){
       
        if(cnt==k){
            prev->next=curr->next;
            delete(curr);
            break;


        }
        prev=curr;
        curr=curr->next;
         cnt++;
    }
    return head;

}




// delete the node with particular value from the linked list
Node* deleteval(Node* head,int val){

    // if list is empty
    if (head == NULL) return head;

    //if val is head data
    if(head->data==val){
         Node* temp=head;
    head=head->next;
    delete temp;
    return head;

    }

    //if val is any data  another than head

    Node* prev=NULL;
    Node* curr=head;
    int cnt=1;
    while(curr!=NULL){
       
        if(curr->data==val){
            prev->next=curr->next;
            delete(curr);
            break;


        }
        prev=curr;
        curr=curr->next;
        
    }
    return head;

}


// insert a node at head 

Node* insertatHead(Node* head,int val){

    Node* temp=new Node(val);
    if (head==NULL)
    return temp;
    else{
         temp->next =head;
    head=temp;
    return head;


    }
   
   
}

// insert a node at tail
Node* insertatTail(Node* head,int val){
     if (head==NULL)
     return new Node(val);

     Node* temp=head;
     while(temp->next!=NULL){
        temp=temp->next;
     }
     Node* newNode=new Node(val);
     temp->next=newNode;
     return head;
   

}


// even if ll is empty we can insert at head and tail by adding the node
// but not in k position (it shoul be k=1)

// insert a node at k position
Node* insertatpos(Node* head,int val, int k){
    if (head == NULL)
    {
        if (k == 1)
        {
            return new Node(val);
        }
        else{
            return head;
        }
    }

    if (k == 1)
    {
        Node *temp = new Node(val);
        temp->next = head;
        head = temp;
        return head;
    }
    

    int cnt = 1;
    Node *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
        cnt++;
        if(cnt==k-1){
            Node *newNode = new Node(val);
            newNode->next=temp->next;
            temp->next=newNode;

        }
        
    }
   
    return head;
}


Node* insertbeforeVal(Node* head,int el, int val){
    if (head == NULL)
    {
       return NULL;
    }

    if ( val== head->data)
    {
        Node *temp = new Node(el);
        temp->next = head;
        head = temp;
        return head;
    }

    Node *temp = head;
    while (temp->next != NULL)
    {
        if (temp->next->data == val)
        {
            Node *newNode = new Node(el);
            newNode->next = temp->next;
            temp->next = newNode;
            break;
        }
        temp = temp->next;
    }

    return head;
}



int main() {
    vector<int> arr = {12,5,8,7,4};  
   Node* head=  convertArr2LL(arr);
   print(head);


   cout<<lengthOFLL(head)<<endl;
   
//    bool ans=checkIfPresent(head,5);
//    cout<<ans<<endl;

//    head = removesHead(head);
//    print(head);


//     head = removesTail(head);
//    print(head);

    // head = deleteK(head,3);
    // print(head);


    // head = deleteval(head,12);
    // print(head);

    //  head = insertatHead(head,17);
    //  print(head);
    //  cout<<lengthOFLL(head)<<endl;

    //   head = insertatpos(head,17,3);
    //   print(head);
    //  cout<<lengthOFLL(head)<<endl;

    head = insertbeforeVal(head,17,8);
     print(head);
     cout<<lengthOFLL(head)<<endl;

